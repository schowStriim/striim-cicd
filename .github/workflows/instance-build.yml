# This is a basic workflow to help you get started with Actions

name: Instance builds pipeline

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
    paths:
      - instance-builds/**
      - .github/workflows/instance-builds.yml
  pull_request:
    branches: [ "main" ]
    paths:
      - instance-builds/**
      - .github/workflows/instance-builds.yml
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

  # This workflow contains a single job called "build"
  instance-build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    
    # Set environment variables
    env:
      TF_VAR_aws_access_key: ${{ secrets.AWS_ACCESS_KEY }}
      TF_VAR_aws_secret_key: ${{ secrets.AWS_SECRET_KEY }}
      TF_VAR_aws_region: ${{ secrets.AWS_REGION }}
    
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      
      # Runs a single command using the runners shell
      - name: Install Terraform and Git
        run: |
          sudo apt-get update && sudo apt-get install -y gnupg software-properties-common
          wget -O- https://apt.releases.hashicorp.com/gpg | \
              gpg --dearmor | \
              sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg
          echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] \
              https://apt.releases.hashicorp.com $(lsb_release -cs) main" | \
              sudo tee /etc/apt/sources.list.d/hashicorp.list
          sudo apt update
          sudo apt-get install terraform
          sudo apt install git
      
      - name: Run Terraform
        run: |
          cd instance-builds/
          terraform init
          terraform plan
          terraform apply -auto-approve
      
      - name: Save Terraform state
        run: |
          git config --global user.email "simson.chow@striim.com"
          git config --global user.name "Simson Chow"
          git config credential.helper '!f() { sleep 1; echo "username=${GIT_USER}"; echo "password=${GIT_PASSWORD}"; }; f'
          git add -A
          sleep 3
          git commit -m 'saving tf state'
          sleep 3
          git push
          
